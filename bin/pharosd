#!/usr/bin/python
import os
import sys
import logging
import optparse

import tornado.httpserver
import tornado.ioloop

import pharos

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option("-c", "--config-file", action="store", dest="config_file",  default="docs/pharos/config_sample.py", help="Configuration file (default %default)")
    parser.add_option("-s", "--static-path", action="store", dest="static_path", default="share/pharos/", help="Path for static files (default %default)")
    parser.add_option("-v", "--verbose", action="count", dest="verbose")
    (options, args) = parser.parse_args()

    if options.verbose > 1:
        level = logging.DEBUG
    elif options.verbose:
        level = logging.INFO
    else:
        level = logging.WARNING
    logging.basicConfig(level=level, stream=sys.stdout)
    
    app_settings = {
        'debug': True,
        'static_path': options.static_path
    }
    
    application = tornado.web.Application([
        (r"/", pharos.MainHandler),
        (r"/poll/metric_(.*)", pharos.PollMetricHandler),
    ], **app_settings)

    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(8888)

    io_loop = tornado.ioloop.IOLoop.instance()

    execfile(options.config_file)

    # We're just going to stuff this variable into our application even though tornado knows nothing about it
    # Allows us to avoid nasty global
    setattr(application, "metric_watchers", list())

    application.metric_watchers += metric_watchers
    
    for watcher in metric_watchers:
        watcher.add_to_loop(io_loop)

    # Let's get it started!
    io_loop.start()
